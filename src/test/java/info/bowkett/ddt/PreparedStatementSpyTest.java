package info.bowkett.ddt;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;
import org.mockito.verification.VerificationMode;

import java.io.InputStream;
import java.io.Reader;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.*;
import java.util.Calendar;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;


/**
 * Created by jbowkett on 27/04/15.
 */
@RunWith(MockitoJUnitRunner.class)
public class PreparedStatementSpyTest {


  private PreparedStatementSpy spy;
  private PreparedStatement pstmt;

  @Test
  public void testAddBatchIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().addBatch();
    then(pstmt, once()).addBatch();
  }

  @Test
  public void testAddBatchWithSQLIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().addBatch("SOME SQL");
    then(pstmt, once()).addBatch("SOME SQL");
  }

  private PreparedStatementSpy given_aPlainStatement() {
    pstmt = mock(PreparedStatement.class);
    final String sql = "INSERT INTO some_table(column_1) VALUES (?)";
    this.spy = new PreparedStatementSpy(pstmt, sql);
    return this.spy;
  }

  private PreparedStatementSpy given_aStatementWithTwoParams() {
    pstmt = mock(PreparedStatement.class);
    final String sql = "INSERT INTO some_table(column_1, column_2) VALUES (?, ?)";
    this.spy = new PreparedStatementSpy(pstmt, sql);
    return this.spy;
  }

  private void given_theUnderlyingStatementWillThrowAnException() throws SQLException {
    when(pstmt.execute()).thenThrow(SQLException.class);
  }

  private PreparedStatement then(PreparedStatement pstmt, VerificationMode once) {
    return verify(pstmt, once);
  }

  @Test
  public void testCancelIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().cancel();
    then(pstmt, once()).cancel();
  }

  @Test
  public void testClearBatchIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().clearBatch();
    then(pstmt, once()).clearBatch();
  }

  @Test
  public void testClearParametersIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().clearParameters();
    then(pstmt, once()).clearParameters();
  }

  @Test
  public void testClearParametersClearsTheSpiedParametersAlso() throws Exception {
    given_aPlainStatement().setString(1, "TEST");
    spy.clearParameters();
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (?)");
  }

  @Test
  public void testClearWarningsIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().clearWarnings();
    then(pstmt, once()).clearWarnings();
  }

  @Test
  public void testCloseIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().close();
    then(pstmt, once()).close();
  }

  @Test
  public void testCloseOnCompletionIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().closeOnCompletion();
    then(pstmt, once()).closeOnCompletion();
  }

  @Test
  public void testExecuteIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().execute();
    then(pstmt, once()).execute();
  }

  @Test
  public void testExecuteBatchIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().executeBatch();
    then(pstmt, once()).executeBatch();
  }

  @Test
  public void testExecuteQueryIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().executeQuery();
    then(pstmt, once()).executeQuery();
  }

  @Test
  public void testExecuteQueryWithSqlIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().setString(1, "someString");
    final String theSQLBeforeExtraSQLIsExecuted = spy.toString();
    when_someOtherSQLIsExecutedByThePlainStatement();
    then_theFormattedSQLIs(theSQLBeforeExtraSQLIsExecuted);
  }


  @Test
  public void testExecuteQueryWithSqlDoesNotClearTheParameters() throws Exception {
    given_aPlainStatement().executeQuery("some SQL string");
    then(pstmt, once()).executeQuery("some SQL string");
  }

  @Test
  public void testExecuteUpdateIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().executeUpdate();
    then(pstmt, once()).executeUpdate();
  }

  @Test
  public void testExecuteUpdateWithSQLIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().executeUpdate("some other sql");
    then(pstmt, once()).executeUpdate("some other sql");
  }

  @Test
  public void testExecuteUpdateWithSQLAndAutogeneratedKeysIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().executeUpdate("some other sql", Statement.NO_GENERATED_KEYS);
    then(pstmt, once()).executeUpdate("some other sql", Statement.NO_GENERATED_KEYS);
  }

  @Test
  public void testExecuteUpdateWithSQLAndColumnIndexesIsCalledOnDelegate() throws Exception {
    final int[] columnIndexes = {1};
    given_aPlainStatement().executeUpdate("some other sql", columnIndexes);
    then(pstmt, once()).executeUpdate("some other sql", columnIndexes);
  }

  @Test
  public void testExecuteUpdateWithSQLAndColumnNamesIsCalledOnDelegate() throws Exception {
    final String[] columnNames = {"column_1"};
    given_aPlainStatement().executeUpdate("some other sql", columnNames);
    then(pstmt, once()).executeUpdate("some other sql", columnNames);
  }

  @Test
  public void testExecuteWithSQLIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().execute("some other sql");
    then(pstmt, once()).execute("some other sql");
  }

  @Test
  public void testExecuteWithSQLAndAutoGeneratedKeysIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().execute("some other sql", Statement.RETURN_GENERATED_KEYS);
    then(pstmt, once()).execute("some other sql", Statement.RETURN_GENERATED_KEYS);
  }

  @Test
  public void testExecuteWithSQLAndColumnIndexesIsCalledOnDelegate() throws Exception {
    final int[] columnIndexes = {1};
    given_aPlainStatement().execute("some other sql", columnIndexes);
    then(pstmt, once()).execute("some other sql", columnIndexes);
  }

  @Test
  public void testExecuteWithSQLAndColumnNamesIsCalledOnDelegate() throws Exception {
    final String[] columnNames = {"some columnName"};
    given_aPlainStatement().execute("some other sql", columnNames);
    then(pstmt, once()).execute("some other sql", columnNames);
  }

  @Test
  public void testGetConnectionIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getConnection();
    then(pstmt, once()).getConnection();
  }

  @Test
  public void testGetFetchDirectionIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getFetchDirection();
    then(pstmt, once()).getFetchDirection();
  }

  @Test
  public void testGetFetchSizeIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getFetchSize();
    then(pstmt, once()).getFetchSize();
  }

  @Test
  public void testGetGeneratedKeysIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getGeneratedKeys();
    then(pstmt, once()).getGeneratedKeys();
  }
  
  @Test
  public void testGetMaxFieldSizeIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getMaxFieldSize();
    then(pstmt, once()).getMaxFieldSize();
  }

  @Test
  public void testGetMaxRowsIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getMaxRows();
    then(pstmt, once()).getMaxRows();
  }

  @Test
  public void testGetMetaDataIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getMetaData();
    then(pstmt, once()).getMetaData();
  }

  @Test
  public void testGetMoreResultsIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getMoreResults();
    then(pstmt, once()).getMoreResults();
  }

  @Test
  public void testGetMoreResultsWithMultipleResultSetsIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getMoreResults(Statement.KEEP_CURRENT_RESULT);
    then(pstmt, once()).getMoreResults(Statement.KEEP_CURRENT_RESULT);
  }

  @Test
  public void testGetParameterMetaDataIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getParameterMetaData();
    then(pstmt, once()).getParameterMetaData();
  }

  @Test
  public void testGetQueryTimeoutIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getQueryTimeout();
    then(pstmt, once()).getQueryTimeout();
  }

  @Test
  public void testGetResultSetIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getResultSet();
    then(pstmt, once()).getResultSet();
  }

  @Test
  public void testGetResultSetConcurrencyIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getResultSetConcurrency();
    then(pstmt, once()).getResultSetConcurrency();
  }

  @Test
  public void testGetResultSetHoldabilityIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getResultSetHoldability();
    then(pstmt, once()).getResultSetHoldability();
  }

  @Test
  public void testGetResultSetTypeIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getResultSetType();
    then(pstmt, once()).getResultSetType();
  }

  @Test
  public void testGetUpdateCountIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getUpdateCount();
    then(pstmt, once()).getUpdateCount();
  }

  @Test
  public void testGetWarningsIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().getWarnings();
    then(pstmt, once()).getWarnings();
  }

  @Test
  public void testIsCloseOnCompletionIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().isCloseOnCompletion();
    then(pstmt, once()).isCloseOnCompletion();
  }

  @Test
  public void testIsClosedIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().isClosed();
    then(pstmt, once()).isClosed();
  }

  @Test
  public void testIsPoolableIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().isPoolable();
    then(pstmt, once()).isPoolable();
  }

  @Test
  public void testIsWrapperForIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().isWrapperFor(getClass());
    then(pstmt, once()).isWrapperFor(getClass());
  }

  @Test
  public void testSetArrayIsCalledOnDelegate() throws Exception {
    final Array mock = mock(Array.class);
    given_aPlainStatement().setArray(0, mock);
    then(pstmt, once()).setArray(0, mock);
  }

  @Test
  public void testSetStringResultsInFormattedSQL() throws Exception {
    given_aPlainStatement().setString(1, "TEST");
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES ('TEST')");
  }

  @Test
  public void testParametersNoLongerFormattedInSQLAfterExecuteIsCalledAndNoExceptionIsThrown() throws Exception {
    given_aPlainStatement().setString(1, "TEST");
    when_theStatementIsExecuted();
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (?)");
  }

  @Test
  public void testParametersFormattedInSQLBeforeExecuteIsCalled() throws Exception {
    given_aPlainStatement().setString(1, "TEST");
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES ('TEST')");
  }

  @Test
  public void testParametersFormattedInSQLAfterExecuteIsCalledAndAnExceptionIsThrown() throws Exception {
    given_aPlainStatement().setString(1, "TEST");
    given_theUnderlyingStatementWillThrowAnException();
    when_theStatementIsExecuted();
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES ('TEST')");
  }

  @Test
  public void testTwoParametersFormattedInSQL() throws Exception {
    given_aStatementWithTwoParams().setString(1, "TEST");
    this.spy.setString(2, "TEST_2");
    then_theFormattedSQLIs("INSERT INTO some_table(column_1, column_2) VALUES ('TEST', 'TEST_2')");
  }

  @Test
  public void testTwoParametersFormattedInSQLAfterExecuteIsCalledAndAnExceptionIsThrownClearParametersShouldBeCalled() throws Exception {
    given_aStatementWithTwoParams().setString(1, "TEST");
    this.spy.setString(2, "TEST_2");
    given_theUnderlyingStatementWillThrowAnException();
    when_theStatementIsExecuted();
    then_theFormattedSQLIs("INSERT INTO some_table(column_1, column_2) VALUES ('TEST', 'TEST_2')");
    this.spy.clearParameters();
    this.spy.setString(1, "Another test");
    then_theFormattedSQLIs("INSERT INTO some_table(column_1, column_2) VALUES ('Another test', ?)");
  }

  @Test
  public void testSetArrayWithEmptyArrayResultsInFormattedSQL() throws Exception {
    final Array mock = mock(Array.class);
    given_aPlainStatement().setArray(1, mock);
    when(mock.getArray()).thenReturn(new String[0]);
    assertEquals("INSERT INTO some_table(column_1) VALUES ([])", spy.toString());
  }

  @Test
  public void testSetArrayResultsInFormattedSQL() throws Exception {
    final Array mock = mock(Array.class);
    given_aPlainStatement().setArray(1, mock);
    when(mock.getArray()).thenReturn(new String[]{"array_1"});
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (['array_1'])");
  }

  @Test
  public void testSetArrayWithMultipleEntriesResultsInFormattedSQL() throws Exception {
    final Array mock = mock(Array.class);
    given_aPlainStatement().setArray(1, mock);
    when(mock.getArray()).thenReturn(new String []{"array_1", "array_2"});
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (['array_1', 'array_2'])");
  }


  @Test
  public void testSetAsciiStreamIsCalledOnDelegate() throws Exception {
    final InputStream mock = mock(InputStream.class);
    given_aPlainStatement().setAsciiStream(1, mock);
    then(pstmt, once()).setAsciiStream(1, mock);
  }

  @Test
  public void testSetAsciiStreamIsFormattedInSQL() throws Exception {
    final InputStream mock = mock(InputStream.class);
    given_aPlainStatement().setAsciiStream(1, mock);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Ascii_>)");
  }

  @Test
  public void testSetAsciiStreamWithIntLengthIsCalledOnDelegate() throws Exception {
    final InputStream mock = mock(InputStream.class);
    given_aPlainStatement().setAsciiStream(1, mock, 1);
    then(pstmt, once()).setAsciiStream(1, mock, 1);
  }

  @Test
  public void testSetAsciiStreamWithIntLengthIsFormattedInSQL() throws Exception {
    final InputStream mock = mock(InputStream.class);
    given_aPlainStatement().setAsciiStream(1, mock, 1);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Ascii_>)");
  }

  @Test
  public void testSetAsciiStreamWithLongLengthIsCalledOnDelegate() throws Exception {
    final InputStream mock = mock(InputStream.class);
    given_aPlainStatement().setAsciiStream(1, mock, Long.MAX_VALUE);
    then(pstmt, once()).setAsciiStream(1, mock, Long.MAX_VALUE);
  }

  @Test
  public void testSetAsciiStreamWithLongLengthIsFormattedInSQL() throws Exception {
    final InputStream mock = mock(InputStream.class);
    given_aPlainStatement().setAsciiStream(1, mock, Long.MAX_VALUE);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Ascii_>)");
  }

  @Test
  public void testSetBigDecimalIsCalledOnDelegate() throws Exception {
    final BigDecimal mock = mock(BigDecimal.class);
    given_aPlainStatement().setBigDecimal(1, mock);
    then(pstmt, once()).setBigDecimal(1, mock);
  }

  @Test
  public void testSetBigDecimalIsFormattedInSQL() throws Exception {
    final BigDecimal mock = BigDecimal.TEN;
    given_aPlainStatement().setBigDecimal(1, mock);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (10)");
  }

  @Test
  public void testSetBinaryStreamIsCalledOnDelegate() throws Exception {
    final InputStream mock = mock(InputStream.class);
    given_aPlainStatement().setBinaryStream(2, mock);
    then(pstmt, once()).setBinaryStream(2, mock);
  }

  @Test
  public void testSetBinaryStreamWithLongLengthIsCalledOnDelegate() throws Exception {
    final InputStream mock = mock(InputStream.class);
    final long length = 1024l;
    given_aPlainStatement().setBinaryStream(3, mock, length);
    then(pstmt, once()).setBinaryStream(3, mock, length);
  }

  @Test
  public void testSetBinaryStreamWithIntLengthIsCalledOnDelegate() throws Exception {
    final InputStream mock = mock(InputStream.class);
    final int length = 1024;
    given_aPlainStatement().setBinaryStream(3, mock, length);
    then(pstmt, once()).setBinaryStream(3, mock, length);
  }

  @Test
  public void testSetBinaryStreamIsFormattedInSQL() throws Exception {
    final InputStream mock = mock(InputStream.class);
    final long length = 1024l;
    given_aPlainStatement().setBinaryStream(1, mock, length);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Binary_>)");
  }

  @Test
  public void testSetBlobIsCalledOnDelegate() throws Exception {
    final Blob mock = mock(Blob.class);
    given_aPlainStatement().setBlob(1, mock);
    then(pstmt, once()).setBlob(1, mock);
  }

  @Test
  public void testSetBlobWithInputStreamIsCalledOnDelegate() throws Exception {
    final InputStream mock = mock(InputStream.class);
    given_aPlainStatement().setBlob(1, mock);
    then(pstmt, once()).setBlob(1, mock);
  }

  @Test
  public void testSetBlobWithInputStreamAndLengthIsCalledOnDelegate() throws Exception {
    final InputStream mock = mock(InputStream.class);
    given_aPlainStatement().setBlob(1, mock, 42);
    then(pstmt, once()).setBlob(1, mock, 42);
  }

  @Test
  public void testSetBlobIsFormattedInSQL() throws Exception {
    final InputStream mock = mock(InputStream.class);
    final long length = 1024l;
    given_aPlainStatement().setBlob(1, mock, length);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Blob_>)");
  }
  
  @Test
  public void testSetBooleanIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().setBoolean(1, true);
    then(pstmt, once()).setBoolean(1, true);
  }


  @Test
  public void testSetBooleanIsFormattedInSQL() throws Exception {
    given_aPlainStatement().setBoolean(1, false);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (false)");
  }
  
  @Test
  public void testSetByteIsCalledOnDelegate() throws Exception {
    byte b = '0';
    given_aPlainStatement().setByte(1, b);
    then(pstmt, once()).setByte(1, b);
  }


  @Test
  public void testSetByteIsFormattedAsHexInSQL() throws Exception {
    final byte b = 26;
    given_aPlainStatement().setByte(1, b);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (0x1a)");
  }
  
  @Test
  public void testSetBytesIsCalledOnDelegate() throws Exception {
    final byte [] bytes = {26, 52, 23};
    given_aPlainStatement().setBytes(1, bytes);
    then(pstmt, once()).setBytes(1, bytes);
  }


  @Test
  public void testSetBytesIsFormattedAsHexInSQL() throws Exception {
    final byte [] bytes = {26, 52, 23};
    given_aPlainStatement().setBytes(1, bytes);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES ([0x1a, 0x34, 0x17])");
  }
  
  @Test
  public void testSetCharacterStreamIsCalledOnDelegate() throws Exception {
    final Reader mock = mock(Reader.class);
    given_aPlainStatement().setCharacterStream(1, mock);
    then(pstmt, once()).setCharacterStream(1, mock);
  }

  @Test
  public void testSetCharacterStreamIsFormattedInSQL() throws Exception {
    final Reader mock = mock(Reader.class);
    given_aPlainStatement().setCharacterStream(1, mock);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Char_>)");
  }


  @Test
  public void testSetCharacterStreamWithIntLengthIsCalledOnDelegate() throws Exception {
    final Reader mock = mock(Reader.class);
    final int length = 1024;
    given_aPlainStatement().setCharacterStream(1, mock, length);
    then(pstmt, once()).setCharacterStream(1, mock, length);
  }

  @Test
  public void testSetCharacterStreamWithIntLengthIsFormattedInSQL() throws Exception {
    final Reader mock = mock(Reader.class);
    final int length = 1024;
    given_aPlainStatement().setCharacterStream(1, mock, length);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Char_>)");
  }
  

  @Test
  public void testSetCharacterStreamWithLongLengthIsCalledOnDelegate() throws Exception {
    final Reader mock = mock(Reader.class);
    final long length = 1024l;
    given_aPlainStatement().setCharacterStream(1, mock, length);
    then(pstmt, once()).setCharacterStream(1, mock, length);
  }

  @Test
  public void testSetCharacterStreamWithLongLengthIsFormattedInSQL() throws Exception {
    final Reader mock = mock(Reader.class);
    final long length = 1024l;
    given_aPlainStatement().setCharacterStream(1, mock, length);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Char_>)");
  }


  @Test
  public void testSetClobIsCalledOnDelegate() throws Exception {
    final Clob mock = mock(Clob.class);
    given_aPlainStatement().setClob(1, mock);
    then(pstmt, once()).setClob(1, mock);
  }
  
  @Test
  public void testSetClobIsFormattedInSQL() throws Exception {
    final Clob mock = mock(Clob.class);
    given_aPlainStatement().setClob(1, mock);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Clob_>)");
  }
  
  @Test
  public void testSetClobWithReaderIsCalledOnDelegate() throws Exception {
    final Reader mockReader = mock(Reader.class);
    given_aPlainStatement().setClob(1, mockReader);
    then(pstmt, once()).setClob(1, mockReader);
  }

  @Test
  public void testSetClobWithReaderIsFormattedInSQL() throws Exception {
    final Reader mockReader = mock(Reader.class);
    given_aPlainStatement().setClob(1, mockReader);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Clob_>)");
  }

  @Test
  public void testSetClobWithReaderAndLengthIsCalledOnDelegate() throws Exception {
    final long length = 2048l;
    final Reader mockReader = mock(Reader.class);
    given_aPlainStatement().setClob(1, mockReader, length);
    then(pstmt, once()).setClob(1, mockReader, length);
  }

  @Test
  public void testSetClobWithReaderAndLengthIsFormattedInSQL() throws Exception {
    final long length = 2048l;
    final Reader mockReader = mock(Reader.class);
    given_aPlainStatement().setClob(1, mockReader, length);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Clob_>)");
  }

  @Test
  public void testSetCursorNameIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().setCursorName("test");
    then(pstmt, once()).setCursorName("test");
  }
  
  @Test
  public void testSetDateIsCalledOnDelegate() throws Exception {
    final Date mock = mock(Date.class);
    given_aPlainStatement().setDate(1, mock);
    then(pstmt, once()).setDate(1, mock);
  }
  
  @Test
  public void testSetDateIsFormattedInSQL() throws Exception {
    final Date date = Date.valueOf("2015-05-26");
    given_aPlainStatement().setDate(1, date);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (\'2015-05-26 00:00:00\')");
  }

  @Test
  public void testSetDateWithCalendarIsCalledOnDelegate() throws Exception {
    final Date mockDate = mock(Date.class);
    final Calendar mockCal = mock(Calendar.class);
    given_aPlainStatement().setDate(1, mockDate, mockCal);
    then(pstmt, once()).setDate(1, mockDate, mockCal);
  }
  
  @Test
  public void testSetDateWithCalendarIsFormattedInSQL() throws Exception {
    final Date date = Date.valueOf("2015-05-26");
    final Calendar mockCal = mock(Calendar.class);
    given_aPlainStatement().setDate(1, date, mockCal);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (\'2015-05-26 00:00:00\')");
  }
  @Test
  public void testSetDoubleIsCalledOnDelegate() throws Exception {
    final double value = 10.0d;
    given_aPlainStatement().setDouble(1, value);
    then(pstmt, once()).setDouble(1, value);
  }

  @Test
  public void testSetDoubleIsFormattedInSQL() throws Exception {
    final Double x = 10d;
    given_aPlainStatement().setDouble(1, x);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (10.00000)");
  }


  @Test
  public void testSetEscapeProcessingIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().setEscapeProcessing(true);
    then(pstmt, once()).setEscapeProcessing(true);
  }
  
  @Test
  public void testSetFetchDirectionIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().setFetchDirection(ResultSet.FETCH_REVERSE);
    then(pstmt, once()).setFetchDirection(ResultSet.FETCH_REVERSE);
  }

  @Test
  public void testSetFetchSizeIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().setFetchSize(1000);
    then(pstmt, once()).setFetchSize(1000);
  }

  
  @Test
  public void testSetFloatIsCalledOnDelegate() throws Exception {
    final float value = 2.2f;
    given_aPlainStatement().setFloat(1, value);
    then(pstmt, once()).setFloat(1, value);
  }

  @Test
  public void testSetFloatIsFormattedInSQL() throws Exception {
    final Float x = 10f;
    given_aPlainStatement().setFloat(1, x);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (10.00000)");
  }

  @Test
  public void testSetIntIsCalledOnDelegate() throws Exception {
    final int value = 5;
    given_aPlainStatement().setInt(1, value);
    then(pstmt, once()).setInt(1, value);
  }


  @Test
  public void testSetIntIsFormattedInSQL() throws Exception {
    final int value = 123456;
    given_aPlainStatement().setInt(1, value);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (123456)");
  }

  @Test
  public void testSetLongIsCalledOnDelegate() throws Exception {
    final long value = 123456789012341l;
    given_aPlainStatement().setLong(1, value);
    then(pstmt, once()).setLong(1, value);
  }

  @Test
  public void testSetLongIsFormattedInSQL() throws Exception {
    final long value = 123456789012341l;
    given_aPlainStatement().setLong(1, value);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (123456789012341)");
  }

  @Test
  public void testSetMaxFieldSizeIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().setMaxFieldSize(128);
    then(pstmt, once()).setMaxFieldSize(128);
  }

  @Test
  public void testSetMaxRowsIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().setMaxRows(256);
    then(pstmt, once()).setMaxRows(256);
  }
  

  @Test
  public void testSetNCharacterStreamIsCalledOnDelegate() throws Exception {
    final Reader reader = mock(Reader.class);
    given_aPlainStatement().setNCharacterStream(1, reader);
    then(pstmt, once()).setNCharacterStream(1, reader);
  }

  @Test
  public void testSetNCharacterStreamIsFormattedInSQL() throws Exception {
    final Reader reader = mock(Reader.class);
    given_aPlainStatement().setNCharacterStream(1, reader);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Nchar_>)");
  }

  @Test
  public void testSetNCharacterStreamWithLongLengthIsCalledOnDelegate() throws Exception {
    final Reader reader = mock(Reader.class);
    final long length = 2048l;
    given_aPlainStatement().setNCharacterStream(1, reader, length);
    then(pstmt, once()).setNCharacterStream(1, reader, length);
  }

  @Test
  public void testSetNCharacterStreamWithLongLengthIsFormattedInSQL() throws Exception {
    final Reader reader = mock(Reader.class);
    final long length = 2048l;
    given_aPlainStatement().setNCharacterStream(1, reader, length);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Nchar_>)");
  }

  @Test
  public void testSetNClobIsCalledOnDelegate() throws Exception {
    final NClob mock = mock(NClob.class);
    given_aPlainStatement().setNClob(1, mock);
    then(pstmt, once()).setNClob(1, mock);
  }

  @Test
  public void testSetNClobIsFormattedInSQL() throws Exception {
    final NClob mock = mock(NClob.class);
    given_aPlainStatement().setNClob(1, mock);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Nclob_>)");
  }
  
  @Test
  public void testSetNClobWithReaderCalledOnDelegate() throws Exception {
    final Reader mock = mock(Reader.class);
    given_aPlainStatement().setNClob(1, mock);
    then(pstmt, once()).setNClob(1, mock);
  }

  @Test
  public void testSetNClobWithReaderIsFormattedInSQL() throws Exception {
    final Reader mock = mock(Reader.class);
    given_aPlainStatement().setNClob(1, mock);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Nclob_>)");
  }

  @Test
  public void testSetNClobWithReaderAndLengthIsCalledOnDelegate() throws Exception {
    final Reader mock = mock(Reader.class);
    given_aPlainStatement().setNClob(1, mock, 1024l);
    then(pstmt, once()).setNClob(1, mock, 1024l);
  }

  @Test
  public void testSetNClobWithReaderAndLengthIsFormattedInSQL() throws Exception {
    final Reader mock = mock(Reader.class);
    given_aPlainStatement().setNClob(1, mock, 1024l);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Nclob_>)");
  }


  @Test
  public void testSetNStringIsCalledOnDelegate() throws Exception {
    final String mock = "mock";
    given_aPlainStatement().setNString(1, mock);
    then(pstmt, once()).setNString(1, mock);
  }

  @Test
  public void testSetNStringIsFormattedInSQL() throws Exception {
    final String mock = "mock";
    given_aPlainStatement().setNString(1, mock);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES ('mock')");
  }

  @Test
  public void testSetNullIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().setNull(1, Types.DATALINK);
    then(pstmt, once()).setNull(1, Types.DATALINK);
  }

  @Test
  public void testSetNullWithTypeNameIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().setNull(1, Types.DATALINK, "typeName");
    then(pstmt, once()).setNull(1, Types.DATALINK, "typeName");
  }

  @Test
  public void testSetNullIsSetInSQL() throws Exception {
    given_aPlainStatement().setNull(1, Types.DATALINK);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (NULL)");
  }


  @Test
  public void testSetNullWithTypeNameIsSetInSQL() throws Exception {
    given_aPlainStatement().setNull(1, Types.DATALINK, "typeName");
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (NULL)");
  }

  
  @Test
  public void testSetObjectIsCalledOnDelegate() throws Exception {
    final Object mock = mock(Object.class);
    given_aPlainStatement().setObject(1, mock);
    then(pstmt, once()).setObject(1, mock);
  }

  @Test
  public void testSetObjectIsSetInSQLByCallingToStringOnTheObject() throws Exception {
    final Object mock = mock(Object.class);
    when(mock.toString()).thenReturn("Some string rep");
    given_aPlainStatement().setObject(1, mock);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES ('Some string rep')");
  }

  @Test
  public void testSetObjectWithIntSQLTypeAndScaleIsCalledOnDelegate() throws Exception {
    final Object mock = mock(Object.class);
    given_aPlainStatement().setObject(1, mock, Types.VARCHAR, 1024);
    then(pstmt, once()).setObject(1, mock, Types.VARCHAR, 1024);
  }

  @Test
  public void testSetObjectWithIntSQLTypeAndScaleIsSetInSQLByCallingToStringOnTheObject() throws Exception {
    final Object mock = mock(Object.class);
    when(mock.toString()).thenReturn("Some string rep");
    given_aPlainStatement().setObject(1, mock, Types.VARCHAR, 1024);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES ('Some string rep')");
  }

  @Test
  public void testSetObjectWithTargetSQLTypeIsCalledOnDelegate() throws Exception {
    final Object mock = mock(Object.class);
    given_aPlainStatement().setObject(1, mock, Types.VARCHAR);
    then(pstmt, once()).setObject(1, mock, Types.VARCHAR);
  }

  @Test
  public void testSetObjectIsWithTargetSQLTypeSetInSQLByCallingToStringOnTheObject() throws Exception {
    final Object mock = mock(Object.class);
    when(mock.toString()).thenReturn("Some string rep");
    given_aPlainStatement().setObject(1, mock, Types.VARCHAR);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES ('Some string rep')");
  }

  @Test
  public void testSetPoolableIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().setPoolable(true);
    then(pstmt, once()).setPoolable(true);
  }

  @Test
  public void testSetQueryTimeoutIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().setQueryTimeout(42);
    then(pstmt, once()).setQueryTimeout(42);
  }

  @Test
  public void testSetRefIsCalledOnDelegate() throws Exception {
    final Ref mock = mock(Ref.class);
    given_aPlainStatement().setRef(1, mock);
    then(pstmt, once()).setRef(1, mock);
  }

  @Test
  public void testSetRefIsFormattedInSQL() throws Exception {
    final Ref mock = mock(Ref.class);
    given_aPlainStatement().setRef(1, mock);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Ref_>)");
  }

  @Test
  public void testSetRowIdIsCalledOnDelegate() throws Exception {
    final RowId mock = mock(RowId.class);
    given_aPlainStatement().setRowId(1, mock);
    then(pstmt, once()).setRowId(1, mock);
  }

  @Test
  public void testSetRowIdIsFormattedInSQL() throws Exception {
    final RowId mock = mock(RowId.class);
    given_aPlainStatement().setRowId(1, mock);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_RowId_>)");
  }
  
  @Test
  public void testSetSQLXMLIsCalledOnDelegate() throws Exception {
    final SQLXML mock = mock(SQLXML.class);
    given_aPlainStatement().setSQLXML(1, mock);
    then(pstmt, once()).setSQLXML(1, mock);
  }
  
  @Test
  public void testSetSQLXMLIsFormattedInSQL() throws Exception {
    final SQLXML mock = mock(SQLXML.class);
    given_aPlainStatement().setSQLXML(1, mock);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_SQLXML_>)");
  }

  @Test
  public void testSetShortIsCalledOnDelegate() throws Exception {
    final short mock = 2;
    given_aPlainStatement().setShort(1, mock);
    then(pstmt, once()).setShort(1, mock);
  }


  @Test
  public void testSetShortIsFormattedInSQL() throws Exception {
    final short mock = 2;
    given_aPlainStatement().setShort(1, mock);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (2)");
  }

  @Test
  public void testSetStringIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().setString(1, "test");
    then(pstmt, once()).setString(1, "test");
  }


  @Test
  public void testSetStringIsFormattedInSQL() throws Exception {
    given_aPlainStatement().setString(1, "test");
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES ('test')");
  }

  @Test
  public void testSetTimeIsCalledOnDelegate() throws Exception {
    final Time mock = mock(Time.class);
    given_aPlainStatement().setTime(1, mock);
    then(pstmt, once()).setTime(1, mock);
  }


  @Test
  public void testSetTimeIsFormattedInSQL() throws Exception {
    final long l = 1432830648339l; //28 may 2015 16:30:48 (UTC)
    Time x = new Time(l);
    given_aPlainStatement().setTime(1, x);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES ('2015-05-28 16:30:48')");
  }


  @Test
  public void testSetTimeWithCalendarIsCalledOnDelegate() throws Exception {
    final Time mockTime = mock(Time.class);
    final Calendar mockCalendar = mock(Calendar.class);
    given_aPlainStatement().setTime(1, mockTime, mockCalendar);
    then(pstmt, once()).setTime(1, mockTime, mockCalendar);
  }


  @Test
  public void testSetTimeWithCalendarIsFormattedInSQL() throws Exception {
    final long l = 1432830648339l; //28 may 2015 16:30:48 (UTC)
    final Time x = new Time(l);
    final Calendar mockCalendar = mock(Calendar.class);
    given_aPlainStatement().setTime(1, x, mockCalendar);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES ('2015-05-28 16:30:48')");
  }


  @Test
  public void testSetTimestampIsCalledOnDelegate() throws Exception {
    final Timestamp mock = mock(Timestamp.class);
    given_aPlainStatement().setTimestamp(1, mock);
    then(pstmt, once()).setTimestamp(1, mock);
  }

  @Test
  public void testSetTimestampIsFormattedInSQL() throws Exception {
    final long l = 1432830648339l; //28 may 2015 16:30:48 (UTC)
    final Timestamp mock = new Timestamp(l);
    given_aPlainStatement().setTimestamp(1, mock);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES ('2015-05-28 16:30:48')");
  }
  
  @Test
  public void testSetTimestampWithCalIsCalledOnDelegate() throws Exception {
    final Timestamp timestamp = mock(Timestamp.class);
    final Calendar cal = mock(Calendar.class);
    given_aPlainStatement().setTimestamp(1, timestamp, cal);
    then(pstmt, once()).setTimestamp(1, timestamp, cal);
  }

  @Test
  public void testSetTimestampWithCalIsFormattedInSQL() throws Exception {
    final long l = 1432830648339l; //28 may 2015 16:30:48 (UTC)
    final Timestamp mock = new Timestamp(l);
    final Calendar cal = mock(Calendar.class);
    given_aPlainStatement().setTimestamp(1, mock, cal);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES ('2015-05-28 16:30:48')");
  }
  
  @Test
  public void testSetURLIsCalledOnDelegate() throws Exception {
    final URL mock = new URL("http://www.java.sun.com");
    given_aPlainStatement().setURL(1, mock);
    then(pstmt, once()).setURL(1, mock);
  }


  @Test
  public void testSetURLIsFormattedInSQL() throws Exception {
    final URL mock = new URL("http://www.java.sun.com");
    given_aPlainStatement().setURL(1, mock);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES ('http://www.java.sun.com')");
  }


  @Test
  public void testSetUnicodeStreamIsCalledOnDelegate() throws Exception {
    final InputStream mock = mock(InputStream.class);
    given_aPlainStatement().setUnicodeStream(1, mock, 1024);
    then(pstmt, once()).setUnicodeStream(1, mock, 1024);
  }

  @Test
  public void testSetUnicodeStreamIsSetInSQL() throws Exception {
    final InputStream mock = mock(InputStream.class);
    given_aPlainStatement().setUnicodeStream(1, mock, 1024);
    then_theFormattedSQLIs("INSERT INTO some_table(column_1) VALUES (<_Unicode_>)");
  }

  @Test
  public void testUnwrapIsCalledOnDelegate() throws Exception {
    given_aPlainStatement().unwrap(String.class);
    then(pstmt, once()).unwrap(String.class);
  }


  private VerificationMode once() {
    return times(1);
  }


  private void then_theFormattedSQLIs(String expected) {
    assertEquals(expected, spy.toString());
  }

  private void when_theStatementIsExecuted() throws SQLException {
    spy.execute();
  }
  
  private void when_someOtherSQLIsExecutedByThePlainStatement() throws SQLException {
    spy.executeQuery("some other sql");
  }

  public void printMethodNames() throws SQLException {
    final Method[] methods = PreparedStatementSpy.class.getMethods();

    for (Method method : methods) {
      final String originalName = method.getName();
      final String testMethodName = toTestMethod(originalName);
      System.out.println("@Test");
      System.out.println("public void " + testMethodName + "() throws Exception {");
      System.out.println("  spy." + originalName + "();");
      System.out.println("  then(pstmt, once())." + originalName + "();");
      System.out.println("}");
      System.out.println();
    }
  }

  private String toTestMethod(String name) {
    final char[] nameChars = name.toCharArray();
    nameChars[0] = Character.toUpperCase(nameChars[0]);
    final String d = new String(nameChars);
    return "test" + d + "IsCalledOnDelegate";
  }
}
